// Code generated by sqlc. DO NOT EDIT.
// source: tax.sql

package db

import (
	"context"
)

const createTax = `-- name: CreateTax :one
INSERT INTO tbl_vats (
    vat_cd,
    vat_key,
    vat_name,
    sort,
    description
  )
VALUES ($1, $2, $3, $4, $5) RETURNING id, vat_cd, vat_key, vat_name, sort, description, created_at, updated_at, deleted_at
`

type CreateTaxParams struct {
	VatCd       int32  `json:"vat_cd"`
	VatKey      string `json:"vat_key"`
	VatName     string `json:"vat_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) CreateTax(ctx context.Context, arg CreateTaxParams) (TblVat, error) {
	row := q.db.QueryRowContext(ctx, createTax,
		arg.VatCd,
		arg.VatKey,
		arg.VatName,
		arg.Sort,
		arg.Description,
	)
	var i TblVat
	err := row.Scan(
		&i.ID,
		&i.VatCd,
		&i.VatKey,
		&i.VatName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTax = `-- name: DeleteTax :exec
UPDATE tbl_vats SET deleted_at = DATE.NOW() WHERE id = $1 RETURNING id, vat_cd, vat_key, vat_name, sort, description, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteTax(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTax, id)
	return err
}

const getTax = `-- name: GetTax :one
SELECT id, vat_cd, vat_key, vat_name, sort, description, created_at, updated_at, deleted_at FROM tbl_vats WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetTax(ctx context.Context, id int64) (TblVat, error) {
	row := q.db.QueryRowContext(ctx, getTax, id)
	var i TblVat
	err := row.Scan(
		&i.ID,
		&i.VatCd,
		&i.VatKey,
		&i.VatName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTaxs = `-- name: GetTaxs :many
SELECT id, vat_cd, vat_key, vat_name, sort, description, created_at, updated_at, deleted_at FROM tbl_vats LIMIT $1 OFFSET $2
`

type GetTaxsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTaxs(ctx context.Context, arg GetTaxsParams) ([]TblVat, error) {
	rows, err := q.db.QueryContext(ctx, getTaxs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblVat{}
	for rows.Next() {
		var i TblVat
		if err := rows.Scan(
			&i.ID,
			&i.VatCd,
			&i.VatKey,
			&i.VatName,
			&i.Sort,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTax = `-- name: UpdateTax :exec
UPDATE tbl_vats SET vat_cd = $2, vat_key = $3, vat_name = $4, sort = $5, description = $6, updated_at = DATE.NOW() WHERE id = $1 RETURNING id, vat_cd, vat_key, vat_name, sort, description, created_at, updated_at, deleted_at
`

type UpdateTaxParams struct {
	ID          int64  `json:"id"`
	VatCd       int32  `json:"vat_cd"`
	VatKey      string `json:"vat_key"`
	VatName     string `json:"vat_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) UpdateTax(ctx context.Context, arg UpdateTaxParams) error {
	_, err := q.db.ExecContext(ctx, updateTax,
		arg.ID,
		arg.VatCd,
		arg.VatKey,
		arg.VatName,
		arg.Sort,
		arg.Description,
	)
	return err
}
