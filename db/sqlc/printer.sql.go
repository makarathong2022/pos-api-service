// Code generated by sqlc. DO NOT EDIT.
// source: printer.sql

package db

import (
	"context"
	"time"
)

const createPrinter = `-- name: CreatePrinter :one
INSERT INTO tbl_printers (
    print_cd,
    print_name,
    sort,
    ip_address,
    description
  )
VALUES ($1, $2, $3, $4, $5) RETURNING id, print_cd, print_name, sort, ip_address, description, deleted_at
`

type CreatePrinterParams struct {
	PrintCd     int32  `json:"print_cd"`
	PrintName   string `json:"print_name"`
	Sort        int64  `json:"sort"`
	IpAddress   string `json:"ip_address"`
	Description string `json:"description"`
}

func (q *Queries) CreatePrinter(ctx context.Context, arg CreatePrinterParams) (TblPrinter, error) {
	row := q.db.QueryRowContext(ctx, createPrinter,
		arg.PrintCd,
		arg.PrintName,
		arg.Sort,
		arg.IpAddress,
		arg.Description,
	)
	var i TblPrinter
	err := row.Scan(
		&i.ID,
		&i.PrintCd,
		&i.PrintName,
		&i.Sort,
		&i.IpAddress,
		&i.Description,
		&i.DeletedAt,
	)
	return i, err
}

const deletePrinter = `-- name: DeletePrinter :exec
UPDATE tbl_printers SET
    deleted_at = $2
    WHERE id = $1
`

type DeletePrinterParams struct {
	ID        int64     `json:"id"`
	DeletedAt time.Time `json:"deleted_at"`
}

func (q *Queries) DeletePrinter(ctx context.Context, arg DeletePrinterParams) error {
	_, err := q.db.ExecContext(ctx, deletePrinter, arg.ID, arg.DeletedAt)
	return err
}

const getPrinter = `-- name: GetPrinter :one
SELECT id, print_cd, print_name, sort, ip_address, description, deleted_at FROM tbl_printers WHERE id = $1
`

func (q *Queries) GetPrinter(ctx context.Context, id int64) (TblPrinter, error) {
	row := q.db.QueryRowContext(ctx, getPrinter, id)
	var i TblPrinter
	err := row.Scan(
		&i.ID,
		&i.PrintCd,
		&i.PrintName,
		&i.Sort,
		&i.IpAddress,
		&i.Description,
		&i.DeletedAt,
	)
	return i, err
}

const getPrinters = `-- name: GetPrinters :many
SELECT id, print_cd, print_name, sort, ip_address, description, deleted_at FROM tbl_printers LIMIT $1 OFFSET $2
`

type GetPrintersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPrinters(ctx context.Context, arg GetPrintersParams) ([]TblPrinter, error) {
	rows, err := q.db.QueryContext(ctx, getPrinters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblPrinter{}
	for rows.Next() {
		var i TblPrinter
		if err := rows.Scan(
			&i.ID,
			&i.PrintCd,
			&i.PrintName,
			&i.Sort,
			&i.IpAddress,
			&i.Description,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrinter = `-- name: UpdatePrinter :exec
UPDATE tbl_printers SET
    print_cd = $2,
    print_name = $3,
    sort = $4,
    ip_address = $5,
    description = $6
    WHERE id = $1
`

type UpdatePrinterParams struct {
	ID          int64  `json:"id"`
	PrintCd     int32  `json:"print_cd"`
	PrintName   string `json:"print_name"`
	Sort        int64  `json:"sort"`
	IpAddress   string `json:"ip_address"`
	Description string `json:"description"`
}

func (q *Queries) UpdatePrinter(ctx context.Context, arg UpdatePrinterParams) error {
	_, err := q.db.ExecContext(ctx, updatePrinter,
		arg.ID,
		arg.PrintCd,
		arg.PrintName,
		arg.Sort,
		arg.IpAddress,
		arg.Description,
	)
	return err
}
