// Code generated by sqlc. DO NOT EDIT.
// source: menu_size.sql

package db

import (
	"context"
	"time"
)

const createMenuSize = `-- name: CreateMenuSize :one
INSERT INTO tbl_menu_sizes (
    size_cd,
    size_name,
    sort,
    description
  )
VALUES ($1, $2, $3, $4) RETURNING id, size_cd, size_name, sort, description, created_at, updated_at, deleted_at
`

type CreateMenuSizeParams struct {
	SizeCd      int32  `json:"size_cd"`
	SizeName    string `json:"size_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) CreateMenuSize(ctx context.Context, arg CreateMenuSizeParams) (TblMenuSize, error) {
	row := q.db.QueryRowContext(ctx, createMenuSize,
		arg.SizeCd,
		arg.SizeName,
		arg.Sort,
		arg.Description,
	)
	var i TblMenuSize
	err := row.Scan(
		&i.ID,
		&i.SizeCd,
		&i.SizeName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMenuSize = `-- name: DeleteMenuSize :exec
UPDATE tbl_menu_sizes SET 
    deleted_at = $2
    WHERE id = $1
`

type DeleteMenuSizeParams struct {
	ID        int64     `json:"id"`
	DeletedAt time.Time `json:"deleted_at"`
}

func (q *Queries) DeleteMenuSize(ctx context.Context, arg DeleteMenuSizeParams) error {
	_, err := q.db.ExecContext(ctx, deleteMenuSize, arg.ID, arg.DeletedAt)
	return err
}

const getMenuSize = `-- name: GetMenuSize :one
SELECT id, size_cd, size_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_sizes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuSize(ctx context.Context, id int64) (TblMenuSize, error) {
	row := q.db.QueryRowContext(ctx, getMenuSize, id)
	var i TblMenuSize
	err := row.Scan(
		&i.ID,
		&i.SizeCd,
		&i.SizeName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMenuSizes = `-- name: GetMenuSizes :many
SELECT id, size_cd, size_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_sizes ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetMenuSizesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMenuSizes(ctx context.Context, arg GetMenuSizesParams) ([]TblMenuSize, error) {
	rows, err := q.db.QueryContext(ctx, getMenuSizes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblMenuSize{}
	for rows.Next() {
		var i TblMenuSize
		if err := rows.Scan(
			&i.ID,
			&i.SizeCd,
			&i.SizeName,
			&i.Sort,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuSize = `-- name: UpdateMenuSize :exec
UPDATE tbl_menu_sizes SET
    size_cd = $2,
    size_name = $3,
    sort = $4,
    description = $5
    WHERE id = $1
`

type UpdateMenuSizeParams struct {
	ID          int64  `json:"id"`
	SizeCd      int32  `json:"size_cd"`
	SizeName    string `json:"size_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) UpdateMenuSize(ctx context.Context, arg UpdateMenuSizeParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuSize,
		arg.ID,
		arg.SizeCd,
		arg.SizeName,
		arg.Sort,
		arg.Description,
	)
	return err
}
