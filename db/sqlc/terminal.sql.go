// Code generated by sqlc. DO NOT EDIT.
// source: terminal.sql

package db

import (
	"context"
	"time"
)

const createTerminal = `-- name: CreateTerminal :one
INSERT INTO tbl_terminals (
    terminal_cd,
    terminal_name,
    ip_address,
    sort,
    outlet_cd,
    description
  )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, terminal_cd, terminal_name, ip_address, sort, outlet_cd, description, created_at, updated_at, deleted_at
`

type CreateTerminalParams struct {
	TerminalCd   int32  `json:"terminal_cd"`
	TerminalName string `json:"terminal_name"`
	IpAddress    string `json:"ip_address"`
	Sort         int64  `json:"sort"`
	OutletCd     int32  `json:"outlet_cd"`
	Description  string `json:"description"`
}

func (q *Queries) CreateTerminal(ctx context.Context, arg CreateTerminalParams) (TblTerminal, error) {
	row := q.db.QueryRowContext(ctx, createTerminal,
		arg.TerminalCd,
		arg.TerminalName,
		arg.IpAddress,
		arg.Sort,
		arg.OutletCd,
		arg.Description,
	)
	var i TblTerminal
	err := row.Scan(
		&i.ID,
		&i.TerminalCd,
		&i.TerminalName,
		&i.IpAddress,
		&i.Sort,
		&i.OutletCd,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTerminal = `-- name: DeleteTerminal :exec
UPDATE tbl_terminals SET
    deleted_at = $2
    WHERE id = $1
`

type DeleteTerminalParams struct {
	ID        int64     `json:"id"`
	DeletedAt time.Time `json:"deleted_at"`
}

func (q *Queries) DeleteTerminal(ctx context.Context, arg DeleteTerminalParams) error {
	_, err := q.db.ExecContext(ctx, deleteTerminal, arg.ID, arg.DeletedAt)
	return err
}

const getTerminal = `-- name: GetTerminal :one
SELECT id, terminal_cd, terminal_name, ip_address, sort, outlet_cd, description, created_at, updated_at, deleted_at FROM tbl_terminals WHERE id = $1
`

func (q *Queries) GetTerminal(ctx context.Context, id int64) (TblTerminal, error) {
	row := q.db.QueryRowContext(ctx, getTerminal, id)
	var i TblTerminal
	err := row.Scan(
		&i.ID,
		&i.TerminalCd,
		&i.TerminalName,
		&i.IpAddress,
		&i.Sort,
		&i.OutletCd,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTerminals = `-- name: GetTerminals :many
SELECT id, terminal_cd, terminal_name, ip_address, sort, outlet_cd, description, created_at, updated_at, deleted_at FROM tbl_terminals ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetTerminalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTerminals(ctx context.Context, arg GetTerminalsParams) ([]TblTerminal, error) {
	rows, err := q.db.QueryContext(ctx, getTerminals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblTerminal{}
	for rows.Next() {
		var i TblTerminal
		if err := rows.Scan(
			&i.ID,
			&i.TerminalCd,
			&i.TerminalName,
			&i.IpAddress,
			&i.Sort,
			&i.OutletCd,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTerminal = `-- name: UpdateTerminal :exec
UPDATE tbl_terminals SET 
    terminal_cd = $2,
    terminal_name = $3,
    ip_address = $4,
    sort = $5,
    outlet_cd = $6,
    description = $7,
    updated_at = $8
    WHERE id = $1
`

type UpdateTerminalParams struct {
	ID           int64     `json:"id"`
	TerminalCd   int32     `json:"terminal_cd"`
	TerminalName string    `json:"terminal_name"`
	IpAddress    string    `json:"ip_address"`
	Sort         int64     `json:"sort"`
	OutletCd     int32     `json:"outlet_cd"`
	Description  string    `json:"description"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTerminal(ctx context.Context, arg UpdateTerminalParams) error {
	_, err := q.db.ExecContext(ctx, updateTerminal,
		arg.ID,
		arg.TerminalCd,
		arg.TerminalName,
		arg.IpAddress,
		arg.Sort,
		arg.OutletCd,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
