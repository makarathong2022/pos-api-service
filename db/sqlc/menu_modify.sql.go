// Code generated by sqlc. DO NOT EDIT.
// source: menu_modify.sql

package db

import (
	"context"
)

const createMenuModify = `-- name: CreateMenuModify :one
INSERT INTO tbl_menu_modifies(modify_cd, modify_name, sort, description) VALUES ($1, $2, $3, $4) RETURNING id, modify_cd, modify_name, sort, description, created_at, updated_at, deleted_at
`

type CreateMenuModifyParams struct {
	ModifyCd    int32  `json:"modify_cd"`
	ModifyName  string `json:"modify_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) CreateMenuModify(ctx context.Context, arg CreateMenuModifyParams) (TblMenuModify, error) {
	row := q.db.QueryRowContext(ctx, createMenuModify,
		arg.ModifyCd,
		arg.ModifyName,
		arg.Sort,
		arg.Description,
	)
	var i TblMenuModify
	err := row.Scan(
		&i.ID,
		&i.ModifyCd,
		&i.ModifyName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMenuModify = `-- name: DeleteMenuModify :exec
UPDATE tbl_menu_modifies SET 
    deleted_at = DATE.NOW()
    WHERE id = $1 RETURNING id, modify_cd, modify_name, sort, description, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteMenuModify(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenuModify, id)
	return err
}

const getMenuModifies = `-- name: GetMenuModifies :many
SELECT id, modify_cd, modify_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_modifies ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetMenuModifiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMenuModifies(ctx context.Context, arg GetMenuModifiesParams) ([]TblMenuModify, error) {
	rows, err := q.db.QueryContext(ctx, getMenuModifies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblMenuModify{}
	for rows.Next() {
		var i TblMenuModify
		if err := rows.Scan(
			&i.ID,
			&i.ModifyCd,
			&i.ModifyName,
			&i.Sort,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuModify = `-- name: GetMenuModify :one
SELECT id, modify_cd, modify_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_modifies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuModify(ctx context.Context, id int64) (TblMenuModify, error) {
	row := q.db.QueryRowContext(ctx, getMenuModify, id)
	var i TblMenuModify
	err := row.Scan(
		&i.ID,
		&i.ModifyCd,
		&i.ModifyName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateMenuModify = `-- name: UpdateMenuModify :exec
UPDATE tbl_menu_modifies SET 
    modify_cd = $2,
    modify_name = $3,
    sort = $4,
    description = $5,
    updated_at = DATE.NOW()
    WHERE id = $1 RETURNING id, modify_cd, modify_name, sort, description, created_at, updated_at, deleted_at
`

type UpdateMenuModifyParams struct {
	ID          int64  `json:"id"`
	ModifyCd    int32  `json:"modify_cd"`
	ModifyName  string `json:"modify_name"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) UpdateMenuModify(ctx context.Context, arg UpdateMenuModifyParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuModify,
		arg.ID,
		arg.ModifyCd,
		arg.ModifyName,
		arg.Sort,
		arg.Description,
	)
	return err
}
