// Code generated by sqlc. DO NOT EDIT.
// source: menu_item_modify.sql

package db

import (
	"context"
)

const createMenuItemModify = `-- name: CreateMenuItemModify :one

INSERT INTO tbl_menu_item_modifies (item_cd, modify_cd) VALUES ($1, $2) RETURNING id, item_cd, modify_cd
`

type CreateMenuItemModifyParams struct {
	ItemCd   int32 `json:"item_cd"`
	ModifyCd int32 `json:"modify_cd"`
}

func (q *Queries) CreateMenuItemModify(ctx context.Context, arg CreateMenuItemModifyParams) (TblMenuItemModify, error) {
	row := q.db.QueryRowContext(ctx, createMenuItemModify, arg.ItemCd, arg.ModifyCd)
	var i TblMenuItemModify
	err := row.Scan(&i.ID, &i.ItemCd, &i.ModifyCd)
	return i, err
}

const getMenuItemModifies = `-- name: GetMenuItemModifies :many

SELECT m.modify_cd, im.modify_name, m.item_cd, i.item_name FROM tbl_menu_item_modifies m 
    INNER JOIN tbl_menu_modifies im ON m.modify_cd = im.modify_cd
    INNER JOIN tbl_menu_items i ON i.item_cd = m.item_cd   
    LIMIT $1 OFFSET $2
`

type GetMenuItemModifiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetMenuItemModifiesRow struct {
	ModifyCd   int32  `json:"modify_cd"`
	ModifyName string `json:"modify_name"`
	ItemCd     int32  `json:"item_cd"`
	ItemName   string `json:"item_name"`
}

func (q *Queries) GetMenuItemModifies(ctx context.Context, arg GetMenuItemModifiesParams) ([]GetMenuItemModifiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItemModifies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMenuItemModifiesRow{}
	for rows.Next() {
		var i GetMenuItemModifiesRow
		if err := rows.Scan(
			&i.ModifyCd,
			&i.ModifyName,
			&i.ItemCd,
			&i.ItemName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuItemModify = `-- name: GetMenuItemModify :one
SELECT id, item_cd, modify_cd FROM tbl_menu_item_modifies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuItemModify(ctx context.Context, id int64) (TblMenuItemModify, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemModify, id)
	var i TblMenuItemModify
	err := row.Scan(&i.ID, &i.ItemCd, &i.ModifyCd)
	return i, err
}

const updateMenuItemModify = `-- name: UpdateMenuItemModify :exec

UPDATE tbl_menu_item_modifies SET item_cd = $2, modify_cd = $3 WHERE id = $1 RETURNING id, item_cd, modify_cd
`

type UpdateMenuItemModifyParams struct {
	ID       int64 `json:"id"`
	ItemCd   int32 `json:"item_cd"`
	ModifyCd int32 `json:"modify_cd"`
}

func (q *Queries) UpdateMenuItemModify(ctx context.Context, arg UpdateMenuItemModifyParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuItemModify, arg.ID, arg.ItemCd, arg.ModifyCd)
	return err
}
