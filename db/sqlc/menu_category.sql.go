// Code generated by sqlc. DO NOT EDIT.
// source: menu_category.sql

package db

import (
	"context"
	"time"
)

const createMenuCategory = `-- name: CreateMenuCategory :one
INSERT INTO tbl_menu_categories(category_cd, category_name, sort, description)
VALUES ($1, $2, $3, $4) RETURNING id, category_cd, category_name, sort, description, created_at, updated_at, deleted_at
`

type CreateMenuCategoryParams struct {
	CategoryCd   int32  `json:"category_cd"`
	CategoryName string `json:"category_name"`
	Sort         int64  `json:"sort"`
	Description  string `json:"description"`
}

func (q *Queries) CreateMenuCategory(ctx context.Context, arg CreateMenuCategoryParams) (TblMenuCategory, error) {
	row := q.db.QueryRowContext(ctx, createMenuCategory,
		arg.CategoryCd,
		arg.CategoryName,
		arg.Sort,
		arg.Description,
	)
	var i TblMenuCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryCd,
		&i.CategoryName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMenuCategory = `-- name: DeleteMenuCategory :exec
UPDATE tbl_menu_categories SET deleted_at = DATE.NOW() WHERE id = $1
`

func (q *Queries) DeleteMenuCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenuCategory, id)
	return err
}

const getMenuCategories = `-- name: GetMenuCategories :many
SELECT id, category_cd, category_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_categories ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetMenuCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMenuCategories(ctx context.Context, arg GetMenuCategoriesParams) ([]TblMenuCategory, error) {
	rows, err := q.db.QueryContext(ctx, getMenuCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblMenuCategory{}
	for rows.Next() {
		var i TblMenuCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryCd,
			&i.CategoryName,
			&i.Sort,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuCategory = `-- name: GetMenuCategory :one
SELECT id, category_cd, category_name, sort, description, created_at, updated_at, deleted_at FROM tbl_menu_categories WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuCategory(ctx context.Context, id int64) (TblMenuCategory, error) {
	row := q.db.QueryRowContext(ctx, getMenuCategory, id)
	var i TblMenuCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryCd,
		&i.CategoryName,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateMenuCategory = `-- name: UpdateMenuCategory :exec
UPDATE tbl_menu_categories SET category_cd  = $2, category_name = $3, sort = $4, description = $5, updated_at = $6
WHERE id = $1
`

type UpdateMenuCategoryParams struct {
	ID           int64     `json:"id"`
	CategoryCd   int32     `json:"category_cd"`
	CategoryName string    `json:"category_name"`
	Sort         int64     `json:"sort"`
	Description  string    `json:"description"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateMenuCategory(ctx context.Context, arg UpdateMenuCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuCategory,
		arg.ID,
		arg.CategoryCd,
		arg.CategoryName,
		arg.Sort,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
