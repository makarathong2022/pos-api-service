// Code generated by sqlc. DO NOT EDIT.
// source: outlet.sql

package db

import (
	"context"
	"time"
)

const createOutlet = `-- name: CreateOutlet :one
INSERT INTO tbl_outlets (
    outlet_cd,
    outlet_name,
    ip_address,
    sort,
    description
  )
VALUES ($1, $2, $3, $4, $5) RETURNING id, outlet_cd, outlet_name, ip_address, sort, description, created_at, updated_at, deleted_at
`

type CreateOutletParams struct {
	OutletCd    int32  `json:"outlet_cd"`
	OutletName  string `json:"outlet_name"`
	IpAddress   string `json:"ip_address"`
	Sort        int64  `json:"sort"`
	Description string `json:"description"`
}

func (q *Queries) CreateOutlet(ctx context.Context, arg CreateOutletParams) (TblOutlet, error) {
	row := q.db.QueryRowContext(ctx, createOutlet,
		arg.OutletCd,
		arg.OutletName,
		arg.IpAddress,
		arg.Sort,
		arg.Description,
	)
	var i TblOutlet
	err := row.Scan(
		&i.ID,
		&i.OutletCd,
		&i.OutletName,
		&i.IpAddress,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOutlet = `-- name: DeleteOutlet :exec
UPDATE tbl_outlets SET
    deleted_at = $2
    WHERE id = $1 RETURNING id, outlet_cd, outlet_name, ip_address, sort, description, created_at, updated_at, deleted_at
`

type DeleteOutletParams struct {
	ID        int64     `json:"id"`
	DeletedAt time.Time `json:"deleted_at"`
}

func (q *Queries) DeleteOutlet(ctx context.Context, arg DeleteOutletParams) error {
	_, err := q.db.ExecContext(ctx, deleteOutlet, arg.ID, arg.DeletedAt)
	return err
}

const getOutlet = `-- name: GetOutlet :one
SELECT id, outlet_cd, outlet_name, ip_address, sort, description, created_at, updated_at, deleted_at FROM tbl_outlets WHERE id = $1
`

func (q *Queries) GetOutlet(ctx context.Context, id int64) (TblOutlet, error) {
	row := q.db.QueryRowContext(ctx, getOutlet, id)
	var i TblOutlet
	err := row.Scan(
		&i.ID,
		&i.OutletCd,
		&i.OutletName,
		&i.IpAddress,
		&i.Sort,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOutlets = `-- name: GetOutlets :many
SELECT id, outlet_cd, outlet_name, ip_address, sort, description, created_at, updated_at, deleted_at FROM tbl_outlets ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetOutletsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOutlets(ctx context.Context, arg GetOutletsParams) ([]TblOutlet, error) {
	rows, err := q.db.QueryContext(ctx, getOutlets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblOutlet{}
	for rows.Next() {
		var i TblOutlet
		if err := rows.Scan(
			&i.ID,
			&i.OutletCd,
			&i.OutletName,
			&i.IpAddress,
			&i.Sort,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOutlet = `-- name: UpdateOutlet :exec
UPDATE tbl_outlets SET
    outlet_cd = $2,
    outlet_name = $3,
    ip_address = $4,
    sort = $5,
    description = $6,
    updated_at = $7
    WHERE id = $1 RETURNING id, outlet_cd, outlet_name, ip_address, sort, description, created_at, updated_at, deleted_at
`

type UpdateOutletParams struct {
	ID          int64     `json:"id"`
	OutletCd    int32     `json:"outlet_cd"`
	OutletName  string    `json:"outlet_name"`
	IpAddress   string    `json:"ip_address"`
	Sort        int64     `json:"sort"`
	Description string    `json:"description"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateOutlet(ctx context.Context, arg UpdateOutletParams) error {
	_, err := q.db.ExecContext(ctx, updateOutlet,
		arg.ID,
		arg.OutletCd,
		arg.OutletName,
		arg.IpAddress,
		arg.Sort,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
