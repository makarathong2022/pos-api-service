// Code generated by sqlc. DO NOT EDIT.
// source: menu_item.sql

package db

import (
	"context"
	"time"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO tbl_menu_items (
    item_cd,
    item_name,
    abv,
    sort,
    outlet_id,
    description
  )
VALUES (
    $1, $2, $3, $4, $5, $6 
)RETURNING id, item_cd, item_name, abv, sort, outlet_id, description, created_at, updated_at, deleted_at
`

type CreateMenuItemParams struct {
	ItemCd      int32  `json:"item_cd"`
	ItemName    string `json:"item_name"`
	Abv         string `json:"abv"`
	Sort        int64  `json:"sort"`
	OutletID    int32  `json:"outlet_id"`
	Description string `json:"description"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (TblMenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.ItemCd,
		arg.ItemName,
		arg.Abv,
		arg.Sort,
		arg.OutletID,
		arg.Description,
	)
	var i TblMenuItem
	err := row.Scan(
		&i.ID,
		&i.ItemCd,
		&i.ItemName,
		&i.Abv,
		&i.Sort,
		&i.OutletID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
 UPDATE tbl_menu_items SET
 deleted_at = date.now() 
 WHERE id = $1 RETURNING id, item_cd, item_name, abv, sort, outlet_id, description, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, id)
	return err
}

const getMenuItem = `-- name: GetMenuItem :one
SELECT id, item_cd, item_name, abv, sort, outlet_id, description, created_at, updated_at, deleted_at FROM tbl_menu_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMenuItem(ctx context.Context, id int64) (TblMenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItem, id)
	var i TblMenuItem
	err := row.Scan(
		&i.ID,
		&i.ItemCd,
		&i.ItemName,
		&i.Abv,
		&i.Sort,
		&i.OutletID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, item_cd, item_name, abv, sort, outlet_id, description, created_at, updated_at, deleted_at FROM tbl_menu_items
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type GetMenuItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMenuItems(ctx context.Context, arg GetMenuItemsParams) ([]TblMenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblMenuItem{}
	for rows.Next() {
		var i TblMenuItem
		if err := rows.Scan(
			&i.ID,
			&i.ItemCd,
			&i.ItemName,
			&i.Abv,
			&i.Sort,
			&i.OutletID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItem = `-- name: UpdateMenuItem :exec
UPDATE tbl_menu_items SET 
 item_cd = $2,
 item_name = $3, 
 abv = $4, 
 sort = $5, 
 outlet_id = $6,
 description = $7,
 updated_at = $8 
 WHERE id = $1 RETURNING id, item_cd, item_name, abv, sort, outlet_id, description, created_at, updated_at, deleted_at
`

type UpdateMenuItemParams struct {
	ID          int64     `json:"id"`
	ItemCd      int32     `json:"item_cd"`
	ItemName    string    `json:"item_name"`
	Abv         string    `json:"abv"`
	Sort        int64     `json:"sort"`
	OutletID    int32     `json:"outlet_id"`
	Description string    `json:"description"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuItem,
		arg.ID,
		arg.ItemCd,
		arg.ItemName,
		arg.Abv,
		arg.Sort,
		arg.OutletID,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
